# Default values for ussd-platform.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

applications:
  - appName: ussd-account-platform
    namespace: ussd-platform
    replicaCount: 1

    image:
      repository: nginx
      pullPolicy: IfNotPresent
      tag: "stable-alpine"
      # repository: europe-west3-docker.pkg.dev/betika-shared-services/ussd-platform/ussd-account-platform
      # pullPolicy: IfNotPresent
      # tag: "latest"

    podAnnotations: {}

    service:
      http:
        enabled: true
        name: ussd-ug-account-platform-svc
        type: ClusterIP
     
        port: 8080
        targetPort: 8080
        
      grpc:
         enabled: true
         name: ussd-ug-account-platform-grpc-svc
         type: ClusterIP
         port: 8040
         targetPort: 8040

    livenessProbe:
      httpGet:
        path: /
        port: http
    readinessProbe:
      httpGet:
        path: /
        port: http

    autoscaling:
      enabled: false

    configmap:
      ussd-account-platform:
        enabled: true
        data:
          GRPC_PORT: "8040"
          HTTP_PORT: "8080"
          ACCOUNT_HOST: "account"
          REDIS_READ_HOST: "127.0.0.1"
          REDIS_READ_PORT: "7001"
          REDIS_READ_PASSWORD: ""
          REDIS_WRITE_HOST: "127.0.0.1"
          REDIS_WRITE_PORT: "7001"
          REDIS_WRITE_PASSWORD: ""
          REDIS_DB: "0"
          LOG_LEVEL: "debug"
          APP: "account"
          CLIENT_ID: "account_service"
          ISS: "https://betika.com"
          JWT_KEY: "Wfa4kAO7ohNhkaCROaJngWkVTVMKbStY"
          WEB_API: "https://api-ug.dev01.int.betika.com/v1"
          REGISTER_OFFLINE: "https://registration.dev01.int.betika.com/v2/register/offline"
          PAYMENT_HOST: "devel-ug-ussd-payment-service.betika.private:8040"
          PAYMENTS_REQUEST_TIMEOUT: "10"
          ACCOUNT_REQUEST_TIMEOUT: "10"
          RESUME_SESSION: "true"
          API_REQUEST_TIMEOUT: "10"
          APP_ENV: "development"
          KAFKA_BROKER: "pkc-z1o60.europe-west1.gcp.confluent.cloud:9092"
          KAFKA_SECURITY_PROTOCOL: "SASL_SSL"
          KAFKA_SASL_MECHANISM: "PLAIN"
          KAFKA_CLUSTER_API_KEY: "MVIPTC5AHSSBJUX3"
          KAFKA_CLUSTER_API_SECRET: "h0ttsyWSOk6BMY1cc+8NhnKmtciU+6M+aNQ5ZXlZjLhSkVts5yjoToUFNW06n6MX"
          KAFKA_SCHEMA_REGISTRY: "https://psrc-yo2rpj.europe-southwest1.gcp.confluent.cloud"
          KAFKA_SCHEMA_REGISTRY_API_KEY: "TQSJPC3RCBHWORU7"
          KAFKA_SCHEMA_REGISTRY_API_SECRET: "DH7Z3bgGvWoVL2InMbM0i/L2A/hO4pVvVgOb9NacwH7pq4GhJH8X5IvTRZQYuznf"
          INIT_KAFKA: "true"

  - appName: ussd-payments-platform
    namespace: ussd-platform
    replicaCount: 1

    image:
      repository: nginx
      pullPolicy: IfNotPresent
      tag: "stable"

      # repository: europe-west3-docker.pkg.dev/betika-shared-services/ussd-platform/ussd-payments-platform
      # pullPolicy: IfNotPresent
      # tag: "latest"

    podAnnotations: {}

    service:
      http:
        enabled: true
        name: ussd-ug-payments-platform-svc
        type: ClusterIP
        port: 8080
        targetPort: 8080
        
      grpc:
         enabled: true
         name: ussd-ug-payments-platform-grpc-svc
         type: ClusterIP
         port: 8040
         targetPort: 8040
     


    livenessProbe:
      httpGet:
        path: /
        port: http
    readinessProbe:
      httpGet:
        path: /
        port: http

    autoscaling:
      enabled: false

    configmap:
      ussd-payments-platform:
        enabled: true
        data:
          GRPC_HOST_PORT: "8040"
          HTTP_HOST_PORT: "8080"
          REDIS_READ_HOST: "127.0.0.1"
          REDIS_READ_PORT: "7001"
          REDIS_READ_PASSWORD: ""
          REDIS_WRITE_HOST: "127.0.0.1"
          REDIS_WRITE_PORT: "7001"
          REDIS_WRITE_PASSWORD: ""
          REDIS_DB: "0"
          WALLET_API_URL: "https://dev-fn-core-ussd-api-mtnm4zmsra-ey.a.run.app/ussd"
          WALLET_HEADER_ACCESS_TOKEN: "d6bb95a7-d1f3-4b98-90a0-154770049736"
          MINIMUM_WITHDRAWAL_AMOUNT: "1000"
          MAXIMUM_WITHDRAWAL_AMOUNT: "5000000"
          ACCOUNT_HOST: "devel-ug-ussd-account-service.betika.private:8040"
          LOG_LEVEL: "debug"
          APP: "payments"
          MINIMUM_DEPOSIT_AMOUNT: "1000"
          MAXIMUM_DEPOSIT_AMOUNT: "5000000"
          COUNTRY: "UG"
          MTN_PROVIDER_ID: "8"
          AIRTEL_PROVIDER_ID: "9"
          KAFKA_BROKER: "pkc-z1o60.europe-west1.gcp.confluent.cloud:9092"
          KAFKA_SECURITY_PROTOCOL: "SASL_SSL"
          KAFKA_SASL_MECHANISM: "PLAIN"
          KAFKA_CLUSTER_API_KEY: "MVIPTC5AHSSBJUX3"
          KAFKA_CLUSTER_API_SECRET: "h0ttsyWSOk6BMY1cc+8NhnKmtciU+6M+aNQ5ZXlZjLhSkVts5yjoToUFNW06n6MX"
          KAFKA_SCHEMA_REGISTRY: "https://psrc-yo2rpj.europe-southwest1.gcp.confluent.cloud"
          KAFKA_SCHEMA_REGISTRY_API_KEY: "TQSJPC3RCBHWORU7"
          KAFKA_SCHEMA_REGISTRY_API_SECRET: "DH7Z3bgGvWoVL2InMbM0i/L2A/hO4pVvVgOb9NacwH7pq4GhJH8X5IvTRZQYuznf"
          INIT_KAFKA: "true"
          RESUME_SESSION: "false"
          API_REQUEST_TIMEOUT: "3"
          API_AUTH_TOKEN_REQUEST_TIMEOUT: "5"
          APP_ENV: "development"


  - appName: ussd-client-platform
    namespace: ussd-platform
     # This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
    replicaCount: 1

    image:
      repository: europe-west3-docker.pkg.dev/betika-shared-services/ussd-platform/ussd-client-platform
      pullPolicy: IfNotPresent
      tag: "latest"


    podAnnotations: {}

    service:
      http:
        enabled: true
        name: ussd-ug-client-platform-svc
        type: ClusterIP
        port: 8080
        targetPort: 8080
        
      grpc:
         enabled: true
         name: ussd-ug-client-platform-grpc-svc
         type: ClusterIP
         port: 8040
         targetPort: 8040

    # This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
    livenessProbe:
      httpGet:
        path: /
        port: http
    readinessProbe:
      httpGet:
        path: /
        port: http

    autoscaling:
        enabled: false  

    configmap:
      ussd-client-platform:
        enabled: true
        data:
        GRPC_HOST_PORT: "8040"
        HTTP_HOST_PORT: "8080"
        REDIS_READ_HOST: "127.0.0.1"
        REDIS_READ_PORT: "7001"
        REDIS_READ_PASSWORD: ""
        REDIS_WRITE_HOST: "127.0.0.1"
        REDIS_WRITE_PORT: "7001"
        REDIS_WRITE_PASSWORD: ""
        REDIS_DB: ""
        CLIENT_ID: "client_service"
        USE_REDIS: "false"
        PAYMENT_HOST: "devel-ug-ussd-payment-service.betika.private:8040"
        ACCOUNT_HOST: "devel-ug-ussd-account-service.betika.private:8040"
        SPORT_HOST: "devel-ussd-sport-service-grpc.betika.private:8040"
        LOG_LEVEL: "debug"
        APP: "client"
        PAYMENTS_REQUEST_TIMEOUT: "10"
        KAFKA_BROKER: "pkc-z1o60.europe-west1.gcp.confluent.cloud:9092"
        KAFKA_SECURITY_PROTOCOL: "SASL_SSL"
        KAFKA_SASL_MECHANISM: "PLAIN"
        KAFKA_CLUSTER_API_KEY: "MVIPTC5AHSSBJUX3"
        KAFKA_CLUSTER_API_SECRET: "h0ttsyWSOk6BMY1cc+8NhnKmtciU+6M+aNQ5ZXlZjLhSkVts5yjoToUFNW06n6MX"
        KAFKA_SCHEMA_REGISTRY: "https://psrc-yo2rpj.europe-southwest1.gcp.confluent.cloud"
        KAFKA_SCHEMA_REGISTRY_API_KEY: "TQSJPC3RCBHWORU7"
        KAFKA_SCHEMA_REGISTRY_API_SECRET: "DH7Z3bgGvWoVL2InMbM0i/L2A/hO4pVvVgOb9NacwH7pq4GhJH8X5IvTRZQYuznf"
        INIT_KAFKA: "true"
        ACCOUNT_REQUEST_TIMEOUT: "10"
        RESUME_SESSION: "true"
        APP_ENV: "development"


  - appName: ussd-sport-platform
    namespace: ussd-platform
     # This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
    replicaCount: 1

    image:
       repository: nginx
       pullPolicy: IfNotPresent
       tag: "latest"
      # repository: europe-west3-docker.pkg.dev/betika-shared-services/ussd-platform/ussd-match-platform
      # pullPolicy: IfNotPresent
      # tag: "latest"


    podAnnotations: {}

    service:
      http:
        enabled: true
        name: ussd-ug-match-platform-svc
        type: ClusterIP
        port: 8080
        targetPort: 8080
      
      grpc:
         enabled: true
         name: ussd-ug-match-platform-grpc-svc
         type: ClusterIP
         port: 8040
         targetPort: 8040

    # This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
    livenessProbe:
      httpGet:
        path: /
        port: http
    readinessProbe:
      httpGet:
        path: /
        port: http   

    autoscaling:
        enabled: false   

    configmap:
       ussd-sport-platform:
       enabled: true
       data:
        GRPC_HOST_PORT: "8040"
        HTTP_HOST_PORT: "8080"
        REDIS_READ_HOST: "127.0.0.1"
        REDIS_READ_PORT: "7001"
        REDIS_READ_PASSWORD: ""
        REDIS_WRITE_HOST: "127.0.0.1"
        REDIS_WRITE_PORT: "7001"
        REDIS_WRITE_PASSWORD: ""
        USE_REDIS: "false"
        LOG_LEVEL: "debug"
        APP: "sport"
        RESUME_SESSION: "true"
        APP_ENV: "development"
        SPORTS_API: ""
        SPORTS_LIMIT: ""
        PRE_MATCHES: "https://devel-sportsbook-api.betika.private/api/v0/prematch?page=1&records_per_page=40&sport_id=1"
        LIVE_SOCCER: "https://devel-sportsbook-api.betika.private/api/v0/livematch?sport_id=1"
        WEB_API: "https://api-cd.dev01.int.betika.com"
        JWT_KEY: "Wfa4kAO7ohNhkaCROaJngWkVTVMKbStY"
        API_REQUEST_TIMEOUT: "5"
        MIN_STAKE: "250"
        MAX_STAKE: "3000000"
        ACCOUNT_HOST: "devel-ug-ussd-account-service.betika.private:8040"
        APP_VERSION: "1.3.17"
        PREMATCH_BET_TYPE: "7"
        LIVEMATCH_BET_TYPE: "8"
        KAFKA_BROKER: "pkc-z1o60.europe-west1.gcp.confluent.cloud:9092"
        KAFKA_SECURITY_PROTOCOL: "SASL_SSL"
        KAFKA_SASL_MECHANISM: "PLAIN"
        KAFKA_CLUSTER_API_KEY: "MVIPTC5AHSSBJUX3"
        KAFKA_CLUSTER_API_SECRET: "h0ttsyWSOk6BMY1cc+8NhnKmtciU+6M+aNQ5ZXlZjLhSkVts5yjoToUFNW06n6MX"
        KAFKA_SCHEMA_REGISTRY: "https://psrc-yo2rpj.europe-southwest1.gcp.confluent.cloud"
        KAFKA_SCHEMA_REGISTRY_API_KEY: "TQSJPC3RCBHWORU7"
        KAFKA_SCHEMA_REGISTRY_API_SECRET: "DH7Z3bgGvWoVL2InMbM0i/L2A/hO4pVvVgOb9NacwH7pq4GhJH8X5IvTRZQYuznf"
        INIT_KAFKA: "true"
        API_AUTH_TOKEN_REQUEST_TIMEOUT: ""
        SOCCER_CATEGORY_ID: "1"



  - appName: ussd-bankerbet-platform
    namespace: ussd-platform
     # This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
    replicaCount: 1

    image:
      repository: nginx
      pullPolicy: IfNotPresent
      tag: "stable-alpine"
      # repository: europe-west3-docker.pkg.dev/betika-shared-services/ussd-platform/ussd-bankerbet-platform
      # pullPolicy: IfNotPresent
      # tag: "latest"


    podAnnotations: {}

    service:
      http:
        enabled: true
        name: ussd-ug-bankerbet-platform-svc
        type: ClusterIP
        port: 8080
        targetPort: 8080
  
      grpc:
         enabled: true
         name: ussd-ug-bankerbet-platform-grpc-svc
         type: ClusterIP
         port: 8040
         targetPort: 8040
 

    # This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
    livenessProbe:
      httpGet:
        path: /
        port: http
    readinessProbe:
      httpGet:
        path: /
        port: http  

    resources: {}
    limits:
        cpu: 2
        memory: 1Gi
    requests:
        cpu: 1
        memory: 512Mi  

    configmap:
      ussd-bankerbet-platform:
        enabled: true
        data:
          GRPC_PORT: "8040"
          SERVER_PORT: "8080"
          APP: "banker_bet"
          LOG_LEVEL: "DEBUG"
          READ_DB: "dev-mysql01_user:4c5cKAeMvx6N58b%PuyfH7MbSak4MQ7cD@tcp(dev-mysql01-primary.betika.private:3306)/dev_betika?parseTime=true&timeout=5s"
          WRITE_DB: "dev-mysql01_user:4c5cKAeMvx6N58b%PuyfH7MbSak4MQ7cD@tcp(dev-mysql01-primary.betika.private:3306)/dev_betika?parseTime=true&timeout=5s"
          NOTIFICATION_API_URL: "http://dev-appserver01-node01.betika.private:13004/consume"
          NOTIFICATION_CLIENT_ID: "INSOMNIA"
          NOTIFICATION_CLIENT_SECRET: "C5wfZ8GthVKpGt9PgGdpbJFe9ttmYxTY"
          hpa: "ussd-bsnkerbet-platform-hpa"
          WHITELIST_IPS: ""
          WEB_API: "https://api-cd.betika.com"
          WALLET_URL: "dev-ke-wallet-account.betika.private:8040"
          API_REQUEST_TIMEOUT: "3"   

    # Horizontal Pod Autoscaler settings
    autoscaling:
      enabled: true
      minReplicas: 10
      maxReplicas: 100
      targetCPUUtilizationPercentage: 80
      targetMemoryUtilizationPercentage: 75    


  - appName: ussd-simulator-platform
    namespace: ussd-platform
     # This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
    replicaCount: 1

    image:
      repository: nginx-alpine
      pullPolicy: IfNotPresent
      tag: "latest"
      # repository: europe-west3-docker.pkg.dev/betika-shared-services/ussd-platform/ussd-simulator-platform
      # pullPolicy: IfNotPresent
      # tag: "latest"


    podAnnotations: {}

    service:
      http:
        enabled: true
        name: ussd-ug-simulator-platform-svc
        type: ClusterIP
        port: 8080
        targetPort: 8080
     
      grpc:
         enabled: false
         name: ussd-ug-simulator-platform-grpc-svc
         type: ClusterIP
         port: 8040
         targetPort: 8040
      

    # This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
    livenessProbe:
      httpGet:
        path: /
        port: http
    readinessProbe:
      httpGet:
        path: /
        port: http 

    autoscaling:
        enabled: false   

    configmap:
     ussd-simulator-platform:
      enabled: false    

               
  - appName: ussd-airtel-proxy-platform
    namespace: ussd-platform
     # This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
    replicaCount: 1

    image:
      repository: nginx
      pullPolicy: IfNotPresent
      tag: "stable-alpine"
      # repository: europe-west3-docker.pkg.dev/betika-shared-services/ussd-platform/ussd-proxies-platform
      # pullPolicy: IfNotPresent
      # tag: "latest"


    podAnnotations: {}

    service:
      http:
        enabled: true
        name: ussd-airtel-ug-proxy-svc
        type: ClusterIP
        port: 8080
        targetPort: 8080
  
      grpc:
         enabled: true
         name: ussd-airtel-ug-proxy-grpc-svc
         type: ClusterIP
         port: 8040
         targetPort: 8040


    # This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
    livenessProbe:
      httpGet:
        path: /
        port: http
    readinessProbe:
      httpGet:
        path: /
        port: http   

    autoscaling:
        enabled: false   

    configmap:
      ussd-airtel-proxy-platform:
       enabled: true
       data:
        CLIENT_HOST_ADDR: "devel-ug-ussd-client-service.betika.private:8040"
        ACCOUNT_HOST_ADDR: "devel-ug-ussd-account-service.betika.private:8040"
        GRPC_SERVER: "8040"
        GATEWAY_PORT: "8080"
        APP: "Airtel UG Proxy"
        KAFKA_BROKER: "pkc-z1o60.europe-west1.gcp.confluent.cloud:9092"
        KAFKA_SECURITY_PROTOCOL: "SASL_SSL"
        KAFKA_SASL_MECHANISM: "PLAIN"
        KAFKA_CLUSTER_API_KEY: "MVIPTC5AHSSBJUX3"
        KAFKA_CLUSTER_API_SECRET: "h0ttsyWSOk6BMY1cc+8NhnKmtciU+6M+aNQ5ZXlZjLhSkVts5yjoToUFNW06n6MX"
        KAFKA_SCHEMA_REGISTRY: "https://psrc-yo2rpj.europe-southwest1.gcp.confluent.cloud"
        KAFKA_SCHEMA_REGISTRY_API_KEY: "TQSJPC3RCBHWORU7"
        KAFKA_SCHEMA_REGISTRY_API_SECRET: "DH7Z3bgGvWoVL2InMbM0i/L2A/hO4pVvVgOb9NacwH7pq4GhJH8X5IvTRZQYuznf"
        LOG_LEVEL: ""
        CP_REF_ID: "193"
        CLIENT_REQUESTS_TIMEOUT: "10"    


  - appName: ussd-mtn-proxy-platform
    namespace: ussd-platform
     # This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
    replicaCount: 1

    image:
      repository: nginx
      pullPolicy: IfNotPresent
      tag: "stable-alpine"
      # repository: europe-west3-docker.pkg.dev/betika-shared-services/ussd-platform/ussd-proxies-platform
      # pullPolicy: IfNotPresent
      # tag: "latest"


    podAnnotations: {}

    service:
      http:
        enabled: true
        name: ussd-mtn-ug-proxy-svc
        type: ClusterIP
        port: 8080
        targetPort: 8080
     
      grpc:
         enabled: true
         name: ussd-mtn-ug-proxy-grpc-svc
         type: ClusterIP
         port: 8040
         targetPort: 8040
    

    # This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
    livenessProbe:
      httpGet:
        path: /
        port: http
    readinessProbe:
      httpGet:
        path: /
        port: http  

    autoscaling:
        enabled: false     

    configmap:
     ussd-mtn-proxy-platform:
      enabled: true
      data:
        CLIENT_HOST_ADDR: "devel-ug-ussd-client-service.betika.private:8040"
        ACCOUNT_HOST_ADDR: "devel-ug-ussd-account-service.betika.private:8040"
        GRPC_SERVER: "8040"
        GATEWAY_PORT: "8080"
        APP: "MTN UG Proxy"
        LOG_LEVEL: ""
        CP_REF_ID: "193"
        CLIENT_REQUESTS_TIMEOUT: "10"
        KAFKA_BROKER: "pkc-z1o60.europe-west1.gcp.confluent.cloud:9092"
        KAFKA_SECURITY_PROTOCOL: "SASL_SSL"
        KAFKA_SASL_MECHANISM: "PLAIN"
        KAFKA_CLUSTER_API_KEY: "MVIPTC5AHSSBJUX3"
        KAFKA_CLUSTER_API_SECRET: "h0ttsyWSOk6BMY1cc+8NhnKmtciU+6M+aNQ5ZXlZjLhSkVts5yjoToUFNW06n6MX"
        KAFKA_SCHEMA_REGISTRY: "https://psrc-yo2rpj.europe-southwest1.gcp.confluent.cloud"
        KAFKA_SCHEMA_REGISTRY_API_KEY: "TQSJPC3RCBHWORU7"
        KAFKA_SCHEMA_REGISTRY_API_SECRET: "DH7Z3bgGvWoVL2InMbM0i/L2A/hO4pVvVgOb9NacwH7pq4GhJH8X5IvTRZQYuznf"

                            

# Common settings for all applications
imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""
nodeSelector: {}

tolerations: []

affinity: {}
